#!/usr/bin/env bash

set -e

echoerr() { printf "%s\n" "$*" >&2; }

# Find package.json up the tree
find_package_json() {
  local dir=$(pwd)

  while [ ! -z "$dir" ] && [ ! -f "$dir/package.json" ]; do
    if [ "$dir" == "/" ]; then
      dir=""
    else
      dir=$(dirname "$dir")
    fi
  done

  if [ ! -f "$dir/package.json" ]; then
    echoerr "No package.json found."
    return 1
  fi

  realpath "$dir/package.json"
}

# Renders a text based list of options that can be selected by the
# user using up, down and enter keys and returns the chosen option.
#
#   Arguments   : list of options, maximum of 256
#                 "opt1" "opt2" ...
#   Return value: selected index (0 for opt1, 1 for opt2 ...)
select_option() {
  # little helpers for terminal print control and key input
  ESC=$( printf "\033")
  cursor_blink_on()  { printf "$ESC[?25h"; }
  cursor_blink_off() { printf "$ESC[?25l"; }
  cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
  print_option()     { printf "  $1 "; }
  print_selected()   { printf "$ESC[;1m> $1 $ESC[0m"; }
  get_cursor_row()   { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
  key_input()        { read -s -n3 key 2>/dev/null >&2
                         if [[ $key = $ESC[A ]]; then echo up;    fi
                         if [[ $key = $ESC[B ]]; then echo down;  fi
                         if [[ $key = ""     ]]; then echo enter; fi; }

  # initially print empty new lines (scroll down if at bottom of screen)
  for opt; do printf "\n"; done

  # determine current screen position for overwriting the options
  local lastrow=$(get_cursor_row)
  local startrow=$(($lastrow - $#))

  # ensure cursor and input echoing back on upon a ctrl+c during read -s
  trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
  cursor_blink_off

  local selected=0
  while true; do
    # print options by overwriting the last lines
    local idx=0
    for opt; do
      cursor_to $(($startrow + $idx))
      if [ $idx -eq $selected ]; then
        print_selected "$opt"
      else
        print_option "$opt"
      fi
      ((idx++))
    done

    # user key control
    case $(key_input) in
      enter) break;;
      up)    ((selected--));
             if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;;
      down)  ((selected++));
             if [ $selected -ge $# ]; then selected=0; fi;;
    esac
  done

  # cursor position back to normal
  cursor_to $lastrow
  printf "$ESC[0m\n"
  cursor_blink_on

  return $selected
}

if [[ $# -ne 1 ]]; then
  PACKAGEJSON=$(find_package_json)

  # Populate scripts array
  mapfile -t scripts < <(cat "$PACKAGEJSON" | jq -r '.scripts | keys[]' | dos2unix)

  set +e
  echo "Scripts:"
  select_option "${scripts[@]}"
  choice=$?
  set -e

  script="${scripts[$choice]}"
  #printf "Selected: %q\n" "$script"
  set "$script"
  # print array
  #printf '%s\n' "${scripts[@]}"
  #exit 0
fi

cmd="${1}"
shift
npm run "$cmd" -- $*
#echo "npm run \"$cmd\" -- $*"
